
package com.xiangqi.demo;
import java.awt.Point;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;
import javax.swing.JLayeredPane;
public class MouseAction extends MouseAdapter {
    private int dx;
    private int dy;
    /**     * <p>[概 要] マウス最初押下時、pointを取得する</p>     * <p>[詳 細] </p>     * <p>[備 考] </p>     *     * @param e マウスの事件     */    @Override    public void mousePressed(MouseEvent e) {         dx = e.getX();         dy = e.getY();         XiangQi man = (XiangQi) e.getSource();         Point p = man.getLocation();         man.setOldXPoint(p.x);         man.setOldYPoints(p.y);         XiangQiPan qiPan  = XiangQiPan.getInstance();         qiPan.setLayer(man, JLayeredPane.DRAG_LAYER);    }

    /**     * <p>[概 要] 棋子の移動軌跡</p>     * <p>[詳 細] </p>     * <p>[備 考] </p>     *     * @param e マウスの事件     */    @Override    public void mouseDragged(MouseEvent e) {        XiangQi man = (XiangQi) e.getSource();        Point p = man.getLocation();        man.setLocation(p.x + (e.getX() - dx), p.y + (e.getY() - dy));    }
    /**     * <p>[概 要] マウスは放下時、棋子の最後位置計算</p>     * <p>[詳 細] </p>     * <p>[備 考] </p>     *     * @param e マウスの事件     */    @Override    public void mouseReleased(MouseEvent e) {        XiangQi man = (XiangQi) e.getSource();        Point p = man.getLocation();        XiangQiPoints instance = XiangQiPoints.getInstance();        int x = p.x + (e.getX() - dx) + 15;        int y = p.y + (e.getY() - dy) + 15;        int cellWidth = instance.getCellWidth();        int rowWidth = instance.getRowWidth();        // マウスはmoved後、X位置        int xpoints = x / cellWidth;        double xDeviation = x % cellWidth;        // マウスはmoved後、Ｙ位置        int ypoints = y / rowWidth;        double yDeviation = y % rowWidth;        // 棋子位置以外場合、半分以上場合、位置は次の棋子位置移動します        double xhalf = (double)cellWidth/2;        double yhalf = (double)rowWidth/2;        if (xDeviation >= xhalf) {            xpoints = xpoints + 1;        }        if (yDeviation >= yhalf) {            ypoints = ypoints + 1;        }        man.setLocation(cellWidth * xpoints - 15, rowWidth * ypoints - 15);         if (XiangQiRule.check(man)) {            man.setOldXPoint(cellWidth * xpoints - 15);            man.setOldYPoints(rowWidth * ypoints - 15);            man.setLocation(cellWidth * xpoints - 15, rowWidth * ypoints - 15);         } else {            man.setLocation(man.getOldXPoint(), man.getOldYPoints());        }        XiangQiPan qiPan  = XiangQiPan.getInstance();        qiPan.setLayer(man, JLayeredPane.PALETTE_LAYER);    }}
    
    
    
package com.xiangqi.demo;
import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.Graphics;import java.awt.Shape;import java.awt.geom.Ellipse2D;
import javax.swing.JButton;
public class XiangQi extends JButton{
    /**     *      */    private static final long serialVersionUID = 1L;        private Color color;        private int xiangQiType;        private int oldXPoint;        private int oldYPoints;        public XiangQi(String name,Color color,int xiangQiType) {        super();        setName(name);        this.xiangQiType = xiangQiType;        // These statements enlarge the button so that it        // becomes a circle rather than an oval.        Dimension size = new Dimension(getPreferredSize());
        size.width = size.height = Math.max(size.width,
                size.height);
        setPreferredSize(size);        setColor(color);        // This call causes the JButton not to paint the background.        // This allows us to paint a round background.         setContentAreaFilled(false);         setBorderPainted(false);         MouseAction mouseAction = new MouseAction();         addMouseListener(mouseAction);         addMouseMotionListener(mouseAction);
    }
    // Paint the round background and label.    protected void paintComponent(Graphics g) {        if (getModel().isArmed()) {            // You might want to make the highlight color            // a property of the RoundButton class.            g.setColor(Color.lightGray);        } else {            g.setColor(new Color(255, 255, 255, 255));        }        g.fillOval(0, 0, 29, 29);        g.setColor(getColor());        g.setFont(new Font("楷体", Font.BOLD, 24));        g.drawString(getName(), 2, 30 - 6);// 在棋子上绘制 “棋子名”        // This call will paint the label and the        // focus rectangle.        super.paintComponent(g);    }
    // Paint the border of the button using a simple stroke.    protected void paintBorder(Graphics g) {        g.setColor(getForeground());        g.drawOval(0, 0, 29,29);    }
    // Hit detection.
    Shape shape;
    public boolean contains(int x, int y) {        // If the button has changed size,        // make a new shape object.        if (shape == null ||                !shape.getBounds().equals(getBounds())) {            shape = new Ellipse2D.Float(0, 0,                    getWidth(), getHeight());        }        return shape.contains(x, y);    }
    /**     * @return color     */    public Color getColor() {        return color;    }
    /**     * @param color 設定する color     */    private void setColor(Color color) {        this.color = color;    }
    /**     * @return xiangQiType     */    public int getXiangQiType() {        return xiangQiType;    }
    /**     * @return oldXPoint     */    public int getOldXPoint() {        return oldXPoint;    }
    /**     * @return oldYPoints     */    public int getOldYPoints() {        return oldYPoints;    }
    /**     * @param oldXPoint 設定する oldXPoint     */    public void setOldXPoint(int oldXPoint) {        this.oldXPoint = oldXPoint;    }
    /**     * @param oldYPoints 設定する oldYPoints     */    public void setOldYPoints(int oldYPoints) {        this.oldYPoints = oldYPoints;    }        }
    
    
 
 
 package com.xiangqi.demo;
public class XiangQiConts {    /**     * 一本のRowのNumber数     */    public static int ROWCOUNT = 10;
    /**     * 一本のCellのNumber数     */    public static int CELLCOUNT = 9;        /**     * 車     */    public static int XIANGQITYPE_01 = 1;        /**     * 馬     */    public static int XIANGQITYPE_02 = 2;        /**     * 象     */    public static int XIANGQITYPE_03 = 3;        /**     * 士     */    public static int XIANGQITYPE_04 = 4;        /**     * 将     */    public static int XIANGQITYPE_05 = 5;        /**     * 砲     */    public static int XIANGQITYPE_06 = 6;        /**     * 兵     */    public static int XIANGQITYPE_07 = 7;}
   
   
 

package com.xiangqi.demo;
import java.awt.Color;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;
import javax.swing.JFrame;import javax.swing.JPanel;import javax.swing.JRadioButton;import javax.swing.SwingUtilities;
public class XiangqiFrame extends JFrame {
    /**     *      */    private static final long serialVersionUID = 1L;
    private XiangQiPan qiPan = null;        public XiangqiFrame() {        setVisible(true);        setTitle("象棋");        setLocationRelativeTo(null);        setSize(500, 500);        setDefaultCloseOperation(DISPOSE_ON_CLOSE);        setLayout( new GridBagLayout() );        init();            }
    private void init() {        // 棋盤のサイズ        int width = 300;
        // 棋盤のサイズ        int height = 300;        XiangQiPoints x = XiangQiPoints.getInstance();        x.initPoints(width, height);        JPanel panel = new JPanel();        qiPan = XiangQiPan.getInstance();        qiPan.setLayout(null);        qiPan.init();        panel.add(qiPan);        panel.setBackground(Color.gray);        add(new JPanel(), new GridBagConstraints(0, 0, 1, 1, 0.1, 0.1, GridBagConstraints.CENTER,                GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));
        add(panel, new GridBagConstraints(0, 1, 1, 1, 0.8, 0.8, GridBagConstraints.CENTER, GridBagConstraints.NONE,                new Insets(0, 0, 0, 0), 0, 0));
        JPanel jpanel = new JPanel();        JRadioButton blackButton = new JRadioButton("BLACK");        jpanel.add(blackButton);                JRadioButton whilteButton = new JRadioButton("WHILTE");        jpanel.add(whilteButton);        blackButton.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                if (!whilteButton.isSelected()) {                    whilteButton.setEnabled(false);                }            }        });        whilteButton.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                if (!blackButton.isSelected()) {                    blackButton.setEnabled(false);                }            }        });        add(jpanel, new GridBagConstraints(0, 2, 1, 1, 0.1, 0.1, GridBagConstraints.CENTER,                GridBagConstraints.NONE, new Insets(0, 0, 30, 0), 0, 0));    }
    public static void main(String[] args) {        SwingUtilities.invokeLater(new Runnable() {            @Override            public void run() {                new XiangqiFrame();            }        });    }
}




package com.xiangqi.demo;
import java.awt.Color;import java.awt.Dimension;import java.awt.Graphics;
import javax.swing.JLayeredPane;
public class XiangQiPan extends JLayeredPane {
    /**     *      */    private static final long serialVersionUID = 1L;
    /**     * padding     */    private static int PADDINGWIDTH = 30;        private int cellWidth;        private int rowWidth;        private static XiangQiPan instance = null;
    private XiangQiPan() {       this(300,300);       setBackground(Color.gray);    }
    private XiangQiPan(int width, int height) {        cellWidth = width/ XiangQiConts.CELLCOUNT;        rowWidth = height / XiangQiConts.ROWCOUNT;        setBackground(Color.gray);        setPreferredSize(new Dimension(width + XiangQiPan.PADDINGWIDTH, height + XiangQiPan.PADDINGWIDTH));    }
    public static XiangQiPan getInstance() {        if (instance == null) {            synchronized (XiangQiPan.class) {                if (instance == null) {                    instance = new XiangQiPan();                }            }        }        return instance;    }
        public void init() {        XiangQiPoints x = XiangQiPoints.getInstance();        XiangQi ju = new XiangQi("車", Color.RED, XiangQiConts.XIANGQITYPE_01);        ju.setBounds(cellWidth * 1 - 15, rowWidth * 1 - 15, PADDINGWIDTH, PADDINGWIDTH);        String juPoint = cellWidth * 1 + "," + rowWidth;        x.updateXiangQi(juPoint, ju);        add(ju);        XiangQi ma = new XiangQi("馬", Color.RED, XiangQiConts.XIANGQITYPE_02);        ma.setBounds(cellWidth * 2 - 15, rowWidth * 1 - 15, PADDINGWIDTH, PADDINGWIDTH);        String maPoint = cellWidth * 2 + "," + rowWidth;        x.updateXiangQi(maPoint, ma);        add(ma);        XiangQi xiang = new XiangQi("象", Color.RED, XiangQiConts.XIANGQITYPE_03);        xiang.setBounds(cellWidth * 3 - 15, rowWidth * 1 - 15, PADDINGWIDTH, PADDINGWIDTH);        String xiangPoint = cellWidth * 3 + "," + rowWidth;        x.updateXiangQi(xiangPoint, xiang);        add(xiang);        XiangQi shi = new XiangQi("士", Color.RED, XiangQiConts.XIANGQITYPE_04);        shi.setBounds(cellWidth * 4 - 15, rowWidth * 1 - 15, PADDINGWIDTH, PADDINGWIDTH);        String shiPoint = cellWidth * 4 + "," + rowWidth;        x.updateXiangQi(shiPoint, shi);        add(shi);        XiangQi jiang = new XiangQi("将", Color.RED, XiangQiConts.XIANGQITYPE_05);        jiang.setBounds(cellWidth * 5 - 15, rowWidth * 1 - 15, PADDINGWIDTH, PADDINGWIDTH);        String jiangPoint = cellWidth * 5 + "," + rowWidth;        x.updateXiangQi(jiangPoint, jiang);        add(jiang);        XiangQi shi2 = new XiangQi("士", Color.RED, XiangQiConts.XIANGQITYPE_04);        shi2.setBounds(cellWidth * 6 - 15, rowWidth * 1 - 15, PADDINGWIDTH, PADDINGWIDTH);        String shi2Point = cellWidth * 6 + "," + rowWidth;        x.updateXiangQi(shi2Point, shi2);        add(shi2);        XiangQi xiang2 = new XiangQi("象", Color.RED, XiangQiConts.XIANGQITYPE_03);        xiang2.setBounds(cellWidth * 7 - 15, rowWidth * 1 - 15, PADDINGWIDTH, PADDINGWIDTH);        String xiang2Point = cellWidth * 7 + "," + rowWidth * 1;        x.updateXiangQi(xiang2Point, xiang2);        add(xiang2);        XiangQi ma2 = new XiangQi("馬", Color.RED, XiangQiConts.XIANGQITYPE_02);        ma2.setBounds(cellWidth * 8 - 15, rowWidth * 1 - 15, PADDINGWIDTH, PADDINGWIDTH);        String ma2Point = cellWidth * 8 + "," + rowWidth * 1;        x.updateXiangQi(ma2Point, ma2);        add(ma2);        XiangQi ju2 = new XiangQi("車", Color.RED, XiangQiConts.XIANGQITYPE_01);        ju2.setBounds(cellWidth * 9 - 15, rowWidth * 1 - 15, PADDINGWIDTH, PADDINGWIDTH);        String ju2Point = cellWidth * 9 + "," + rowWidth * 1;        x.updateXiangQi(ju2Point, ju2);        add(ju2);
        XiangQi pao1 = new XiangQi("砲", Color.RED, XiangQiConts.XIANGQITYPE_06);        pao1.setBounds(cellWidth * 2 - 15, rowWidth * 3 - 15, PADDINGWIDTH, PADDINGWIDTH);        String pao1Point = cellWidth * 2 + "," + rowWidth * 3;        x.updateXiangQi(pao1Point, pao1);        add(pao1);
        XiangQi pao2 = new XiangQi("砲", Color.RED, XiangQiConts.XIANGQITYPE_06);        pao2.setBounds(cellWidth * 8 - 15, rowWidth * 3 - 15, PADDINGWIDTH, PADDINGWIDTH);        String pao2Point = cellWidth * 8 + "," + rowWidth * 3;        x.updateXiangQi(pao2Point, pao2);        add(pao2);
        XiangQi zu1 = new XiangQi("卒", Color.RED, XiangQiConts.XIANGQITYPE_07);        zu1.setBounds(cellWidth * 1 - 15, rowWidth * 4 - 15, PADDINGWIDTH, PADDINGWIDTH);        String zu1Point = cellWidth * 1 + "," + rowWidth * 4;        x.updateXiangQi(zu1Point, zu1);        add(zu1);
        XiangQi zu2 = new XiangQi("卒", Color.RED, XiangQiConts.XIANGQITYPE_07);        zu2.setBounds(cellWidth * 3 - 15, rowWidth * 4 - 15, PADDINGWIDTH, PADDINGWIDTH);        String zu2Point = cellWidth * 3 + "," + rowWidth * 4;        x.updateXiangQi(zu2Point, zu2);        add(zu2);
        XiangQi zu3 = new XiangQi("卒", Color.RED, XiangQiConts.XIANGQITYPE_07);        zu3.setBounds(cellWidth * 5 - 15, rowWidth * 4 - 15, PADDINGWIDTH, PADDINGWIDTH);        String zu3Point = cellWidth * 5 + "," + rowWidth * 4;        x.updateXiangQi(zu3Point, zu3);        add(zu3);
        XiangQi zu4 = new XiangQi("卒", Color.RED, XiangQiConts.XIANGQITYPE_07);        zu4.setBounds(cellWidth * 7 - 15, rowWidth * 4 - 15, PADDINGWIDTH, PADDINGWIDTH);        String zu4Point = cellWidth * 7 + "," + rowWidth * 4;        x.updateXiangQi(zu4Point, zu4);        add(zu4);
        XiangQi zu5 = new XiangQi("卒", Color.RED, XiangQiConts.XIANGQITYPE_07);        zu5.setBounds(cellWidth * 9 - 15, rowWidth * 4 - 15, PADDINGWIDTH, PADDINGWIDTH);        String zu5Point = cellWidth * 9 + "," + rowWidth * 4;        x.updateXiangQi(zu5Point, zu5);        add(zu5);
        XiangQi bju = new XiangQi("车", Color.BLACK, XiangQiConts.XIANGQITYPE_01);        bju.setBounds(cellWidth * 1 - 15, rowWidth * 10 - 15, PADDINGWIDTH, PADDINGWIDTH);        String bjuPoint = cellWidth * 1 + "," + rowWidth * 10;        x.updateXiangQi(bjuPoint, bju);        add(bju);        XiangQi bma = new XiangQi("馬", Color.BLACK, XiangQiConts.XIANGQITYPE_02);        bma.setBounds(cellWidth * 2 - 15, rowWidth * 10 - 15, PADDINGWIDTH, PADDINGWIDTH);        String bmaPoint = cellWidth * 2 + "," + rowWidth * 10;        x.updateXiangQi(bmaPoint, bma);        add(bma);        XiangQi bxiang = new XiangQi("相", Color.BLACK, XiangQiConts.XIANGQITYPE_03);        bxiang.setBounds(cellWidth * 3 - 15, rowWidth * 10 - 15, PADDINGWIDTH, PADDINGWIDTH);        String bxiangPoint = cellWidth * 3 + "," + rowWidth * 10;        x.updateXiangQi(bxiangPoint, bxiang);        add(bxiang);        XiangQi bshi = new XiangQi("仕", Color.BLACK, XiangQiConts.XIANGQITYPE_04);        bshi.setBounds(cellWidth * 4 - 15, rowWidth * 10 - 15, PADDINGWIDTH, PADDINGWIDTH);        String bshiPoint = cellWidth * 4 + "," + rowWidth * 10;        x.updateXiangQi(bshiPoint, bshi);        add(bshi);        XiangQi bjiang = new XiangQi("帅", Color.BLACK, XiangQiConts.XIANGQITYPE_05);        bjiang.setBounds(cellWidth * 5 - 15, rowWidth * 10 - 15, PADDINGWIDTH, PADDINGWIDTH);        String bjiangPoint = cellWidth * 5 + "," + rowWidth * 10;        x.updateXiangQi(bjiangPoint, bjiang);        add(bjiang);        XiangQi bshi2 = new XiangQi("仕", Color.BLACK, XiangQiConts.XIANGQITYPE_04);        bshi2.setBounds(cellWidth * 6 - 15, rowWidth * 10 - 15, PADDINGWIDTH, PADDINGWIDTH);        String bshi2Point = cellWidth * 6 + "," + rowWidth * 10;        x.updateXiangQi(bshi2Point, bshi2);        add(bshi2);        XiangQi bxiang2 = new XiangQi("相", Color.BLACK, XiangQiConts.XIANGQITYPE_03);        bxiang2.setBounds(cellWidth * 7 - 15, rowWidth * 10 - 15, PADDINGWIDTH, PADDINGWIDTH);        String bxiang2Point = cellWidth * 7 + "," + rowWidth * 10;        x.updateXiangQi(bxiang2Point, bxiang2);        add(bxiang2);        XiangQi bma2 = new XiangQi("馬", Color.BLACK, XiangQiConts.XIANGQITYPE_02);        bma2.setBounds(cellWidth * 8 - 15, rowWidth * 10 - 15, PADDINGWIDTH, PADDINGWIDTH);        String bma2Point = cellWidth * 8 + "," + rowWidth * 10;        x.updateXiangQi(bma2Point, bma2);        add(bma2);        XiangQi bju2 = new XiangQi("车", Color.BLACK, XiangQiConts.XIANGQITYPE_01);        bju2.setBounds(cellWidth * 9 - 15, rowWidth * 10 - 15, PADDINGWIDTH, PADDINGWIDTH);        String bju2Point = cellWidth * 9 + "," + rowWidth * 10;        x.updateXiangQi(bju2Point, bju2);        add(bju2);
        XiangQi bpao1 = new XiangQi("炮", Color.BLACK, XiangQiConts.XIANGQITYPE_06);        bpao1.setBounds(cellWidth * 2 - 15, rowWidth * 8 - 15, PADDINGWIDTH, PADDINGWIDTH);        String bpao1Point = cellWidth * 2 + "," + rowWidth * 8;        x.updateXiangQi(bpao1Point, bpao1);        add(bpao1);
        XiangQi bpao2 = new XiangQi("炮", Color.BLACK, XiangQiConts.XIANGQITYPE_06);        bpao2.setBounds(cellWidth * 8 - 15, rowWidth * 8 - 15, PADDINGWIDTH, PADDINGWIDTH);        String bpao2Point = cellWidth * 8 + "," + rowWidth * 8;        x.updateXiangQi(bpao2Point, bpao2);        add(bpao2);
        XiangQi bing1 = new XiangQi("兵", Color.BLACK, XiangQiConts.XIANGQITYPE_07);        bing1.setBounds(cellWidth * 1 - 15, rowWidth * 7 - 15, PADDINGWIDTH, PADDINGWIDTH);        String bing1Point = cellWidth * 1 + "," + rowWidth * 7;        x.updateXiangQi(bing1Point, bing1);        add(bing1);
        XiangQi bing2 = new XiangQi("兵", Color.BLACK, XiangQiConts.XIANGQITYPE_07);        bing2.setBounds(cellWidth * 3 - 15, rowWidth * 7 - 15, PADDINGWIDTH, PADDINGWIDTH);        String bing2Point = cellWidth * 3 + "," + rowWidth * 7;        x.updateXiangQi(bing2Point, bing2);        add(bing2);
        XiangQi bing3 = new XiangQi("兵", Color.BLACK, XiangQiConts.XIANGQITYPE_07);        bing3.setBounds(cellWidth * 5 - 15, rowWidth * 7 - 15, PADDINGWIDTH, PADDINGWIDTH);        String bing3Point = cellWidth * 5 + "," + rowWidth * 7;        x.updateXiangQi(bing3Point, bing3);        add(bing3);
        XiangQi bing4 = new XiangQi("兵", Color.BLACK, XiangQiConts.XIANGQITYPE_07);        bing4.setBounds(cellWidth * 7 - 15, rowWidth * 7 - 15, PADDINGWIDTH, PADDINGWIDTH);        String bing4Point = cellWidth * 7 + "," + rowWidth * 7;        x.updateXiangQi(bing4Point, bing4);        add(bing4);
        XiangQi bing5 = new XiangQi("兵", Color.BLACK, XiangQiConts.XIANGQITYPE_07);        bing5.setBounds(cellWidth * 9 - 15, rowWidth * 7 - 15, PADDINGWIDTH, PADDINGWIDTH);        String bing5Point = cellWidth * 9 + "," + rowWidth * 7;        x.updateXiangQi(bing5Point, bing5);        add(bing5);    }
    /**     * <p>[概 要] 棋盤の絵</p>     * <p>[詳 細] </p>     * <p>[備 考] </p>     *     * @param g     */    @Override    protected void paintComponent(Graphics g) {        super.paintComponent(g);        for (int i = 0; i < XiangQiConts.CELLCOUNT; i++) {            if (i == 0 || i == XiangQiConts.CELLCOUNT - 1) {                g.drawLine(cellWidth * (i + 1), rowWidth, cellWidth * (i + 1), rowWidth * XiangQiConts.ROWCOUNT);            } else {                g.drawLine(cellWidth * (i + 1), rowWidth, cellWidth * (i + 1), rowWidth * (XiangQiConts.ROWCOUNT/2));                g.drawLine(cellWidth * (i + 1), rowWidth * 6, cellWidth * (i + 1), rowWidth * XiangQiConts.ROWCOUNT);            }        }        for (int i = 0; i < XiangQiConts.ROWCOUNT; i++) {            if (i == 2 || i == 7) {                drawMarkLine(g, cellWidth * 2, rowWidth * (i + 1));                drawMarkLine(g, cellWidth * 8, rowWidth * (i + 1));            }            if (i == 3 || i == 6) {                drawMarkLine(g, cellWidth * 1, rowWidth * (i + 1));                drawMarkLine(g, cellWidth * 3, rowWidth * (i + 1));                drawMarkLine(g, cellWidth * 5, rowWidth * (i + 1));                drawMarkLine(g, cellWidth * 7, rowWidth * (i + 1));                drawMarkLine(g, cellWidth * 9, rowWidth * (i + 1));            }            g.drawLine(cellWidth, rowWidth * (i + 1), cellWidth * 9, rowWidth * (i + 1));        }        g.drawLine(cellWidth * 4, rowWidth, cellWidth * 6, rowWidth * 3);        g.drawLine(cellWidth * 4, rowWidth * 3, cellWidth * 6, rowWidth);        g.drawLine(cellWidth * 4, rowWidth * 8, cellWidth * 6, rowWidth * 10);        g.drawLine(cellWidth * 4, rowWidth * 10, cellWidth * 6, rowWidth * 8);    }        private void drawMarkLine(Graphics g,int x,int y) {        g.drawLine(x -8, y -3, x -3, y-3);        g.drawLine(x -3, y -8, x -3, y-3);        g.drawLine(x +3, y -8, x +3, y-3);        g.drawLine(x +3, y -3, x +8, y-3);        g.drawLine(x +3, y +3, x +8, y+3);        g.drawLine(x +3, y +3, x +3, y+8);        g.drawLine(x -8, y +3, x -3, y+3);        g.drawLine(x -3, y +3, x -3, y+9);    }
    /**     * @return cellWidth     */    public int getCellWidth() {        return cellWidth;    }    /**     * @return rowWidth     */    public int getRowWidth() {        return rowWidth;    }}
    
    
  
 



package com.xiangqi.demo;
import java.util.HashMap;import java.util.Map;
public class XiangQiPoints {    private static Map<String, XiangQi> pointChess = new HashMap<String, XiangQi>();
    private int cellWidth;    private int rowWidth;
    private static XiangQiPoints instance = null;
    private XiangQiPoints() {    }
    public static XiangQiPoints getInstance() {        if (instance == null) {            synchronized (XiangQiPoints.class) {                if (instance == null) {                    instance = new XiangQiPoints();                }            }        }        return instance;    }
    public void initPoints(int width, int height) {        cellWidth = width / XiangQiConts.CELLCOUNT;        rowWidth = height / XiangQiConts.ROWCOUNT;        for (int i = 0; i < XiangQiConts.CELLCOUNT; i++) {            for (int j = 0; j < XiangQiConts.ROWCOUNT; j++) {                String str = cellWidth * (i + 1) + "," + rowWidth * (j + 1);                pointChess.put(str, null);            }        }    }        public Map<String, XiangQi> getAllPoints() {        Map<String, XiangQi> tempPoints= new HashMap<String, XiangQi>();        tempPoints.putAll(pointChess);        return tempPoints;    }
    public boolean checkPoints(String point) {        if (pointChess.containsKey(point)) {            return true;        }        return false;    }
    public XiangQi getXiangQi(String point) {        return pointChess.get(point);    }        public void updateXiangQi(String point,XiangQi xiangQi) {        pointChess.put(point, xiangQi);    }        /**     * @return cellWidth     */    public int getCellWidth() {        return cellWidth;    }
    /**     * @return rowWidth     */    public int getRowWidth() {        return rowWidth;    }        }
    
    





package com.xiangqi.demo;
import java.awt.Color;import java.awt.Point;import java.util.ArrayList;import java.util.List;import java.util.Map;
public class XiangQiRule {
    public static boolean check(XiangQi xiangQi) {        XiangQiPoints instance = XiangQiPoints.getInstance();                Map<String, XiangQi> pointChess = instance.getAllPoints();        if (pointChess.size() == 0) {            return false;        }        Point p = xiangQi.getLocation();        // 棋移動前の位置        int newXpoint = p.x +15;        int newYpoint = p.y +15;        String newPoint = newXpoint+ "," + newYpoint;        if (!instance.checkPoints(newPoint)) {            return false;        }                if (xiangQi.getXiangQiType() == XiangQiConts.XIANGQITYPE_01) {            return checkJu(xiangQi);        } else if (xiangQi.getXiangQiType() == XiangQiConts.XIANGQITYPE_02) {         // 馬のルル            return checkMa(xiangQi);        } else if (xiangQi.getXiangQiType() == XiangQiConts.XIANGQITYPE_03) {         // 象のルル            return checkXiang(xiangQi);
        } else if (xiangQi.getXiangQiType() == XiangQiConts.XIANGQITYPE_04) {         // 士のルル            return checkShi(xiangQi);        } else if (xiangQi.getXiangQiType() == XiangQiConts.XIANGQITYPE_05) {         // 将のルル            return checkJiang(xiangQi);        } else if (xiangQi.getXiangQiType() == XiangQiConts.XIANGQITYPE_06) {         // 砲のルル            return checkPao(xiangQi);        } else if (xiangQi.getXiangQiType() == XiangQiConts.XIANGQITYPE_07) {         // 兵のルル            return checkBing(xiangQi);        }        return true;    }        /**     * <p>[概 要] 車のルルチェック</p>     * <p>[詳 細] </p>     * <p>[備 考] </p>     *     * @param xiangQi　棋     */    private static boolean checkJu(XiangQi xiangQi) {        XiangQiPoints instance = XiangQiPoints.getInstance();        int rowWidth = instance.getRowWidth();        int cellWidth = instance.getCellWidth();        // 棋移動前の位置        int oldXpoint = xiangQi.getOldXPoint() +15;        int oldYPoint = xiangQi.getOldYPoints()+15;        String oldPoint = oldXpoint+ "," + oldYPoint;        Point p = xiangQi.getLocation();        // 棋移動前の位置        int newXpoint = p.x +15;        int newYpoint = p.y +15;        String newPoint = newXpoint+ "," + newYpoint;        if (newXpoint != oldXpoint && newYpoint != oldYPoint) {            return false;        }
        List<String> pointsLst = new ArrayList<String>();        if (newXpoint == oldXpoint) {            int abs = Math.abs(newYpoint - oldYPoint);            int count = abs / rowWidth;            for (int i = 1; i < count; i++) {                if (newYpoint > oldYPoint) {                    pointsLst.add(oldXpoint + "," + (oldYPoint + rowWidth * i));                } else {                    pointsLst.add(oldXpoint + "," + (oldYPoint - rowWidth * i));                }            }        }
        if (newYpoint == oldYPoint) {            int abs = Math.abs(newXpoint - oldXpoint);            int count = abs / cellWidth;            for (int i = 1; i < count; i++) {                if (newXpoint > oldXpoint) {                    pointsLst.add((oldXpoint + cellWidth * i) + "," + oldYPoint);                } else {                    pointsLst.add((oldXpoint - cellWidth * i) + "," + oldYPoint);                }            }        }                for (String pointCheck : pointsLst) {            if (instance.checkPoints(pointCheck)) {                XiangQi checkXiangQi = instance.getXiangQi(pointCheck);                if (checkXiangQi != null) {                    return false;                }            }        }        XiangQi checkXiangQi = instance.getXiangQi(newPoint);        if (checkXiangQi != null) {            if (checkXiangQi.getColor().equals(xiangQi.getColor())) {                return false;            } else {                XiangQiPan qiPan  = XiangQiPan.getInstance();                qiPan.remove(checkXiangQi);                instance.updateXiangQi(oldPoint, null);                instance.updateXiangQi(newPoint, xiangQi);                return true;            }        } else {            instance.updateXiangQi(oldPoint, null);            instance.updateXiangQi(newPoint, xiangQi);            return true;        }    }        /**     * <p>[概 要] 馬のルルチェック</p>     * <p>[詳 細] </p>     * <p>[備 考] </p>     *     * @param xiangQi　棋     */    private static boolean checkMa(XiangQi xiangQi) {        XiangQiPoints instance = XiangQiPoints.getInstance();        int rowWidth = instance.getRowWidth();        int cellWidth = instance.getCellWidth();        // 棋移動前の位置        int oldXpoint = xiangQi.getOldXPoint() +15;        int oldYPoint = xiangQi.getOldYPoints()+15;        String oldPoint = oldXpoint+ "," + oldYPoint;        Point p = xiangQi.getLocation();        // 棋移動前の位置        int newXpoint = p.x +15;        int newYpoint = p.y +15;        int xAbs = Math.abs(newXpoint-oldXpoint);        int yAbs = Math.abs(newYpoint-oldYPoint);                if (!((xAbs == cellWidth && yAbs == rowWidth * 2) || (xAbs == cellWidth * 2 && yAbs == rowWidth))) {            return false;        }                List<String> maJiaoLst = new ArrayList<String>();        maJiaoLst.add((oldXpoint - cellWidth) + "," + oldYPoint);        maJiaoLst.add(oldXpoint + "," + (oldYPoint - rowWidth));        maJiaoLst.add((oldXpoint + cellWidth) + "," + oldYPoint);        maJiaoLst.add(oldXpoint + "," + (oldYPoint + rowWidth));        for (String majiao : maJiaoLst) {            if (instance.checkPoints(majiao)) {                XiangQi checkXiangQi = instance.getXiangQi(majiao);                if (checkXiangQi != null) {                    Point maJiaoP = checkXiangQi.getLocation();                    int maJiaoXpoint = maJiaoP.x +15;                    int maJiaoYpoint = maJiaoP.y +15;                    int maJiaoXAbs = Math.abs(maJiaoXpoint - newXpoint);                    int maJiaoYAbs = Math.abs(maJiaoYpoint-newYpoint);                    if (maJiaoXAbs == cellWidth && maJiaoYAbs == rowWidth) {                        return false;                    }                }            }        }                String newPoint = newXpoint+ "," + newYpoint;        List<String> pointsLst = new ArrayList<String>();        pointsLst.add((oldXpoint - cellWidth) + "," + (oldYPoint - rowWidth * 2));        pointsLst.add((oldXpoint + cellWidth) + "," + (oldYPoint - rowWidth * 2));        pointsLst.add((oldXpoint - cellWidth) + "," + (oldYPoint + rowWidth * 2));        pointsLst.add((oldXpoint + cellWidth) + "," + (oldYPoint + rowWidth * 2));
        pointsLst.add((oldXpoint - cellWidth * 2) + "," + (oldYPoint - rowWidth));        pointsLst.add((oldXpoint + cellWidth * 2) + "," + (oldYPoint - rowWidth));        pointsLst.add((oldXpoint - cellWidth * 2) + "," + (oldYPoint + rowWidth));        pointsLst.add((oldXpoint + cellWidth * 2) + "," + (oldYPoint + rowWidth));        if (pointsLst.contains(newPoint)) {            XiangQi checkXiangQi = instance.getXiangQi(newPoint);            if (checkXiangQi != null) {                if (checkXiangQi.getColor().equals(xiangQi.getColor())) {                    return false;                } else {                    XiangQiPan qiPan  = XiangQiPan.getInstance();                    qiPan.remove(checkXiangQi);                    instance.updateXiangQi(oldPoint, null);                    instance.updateXiangQi(newPoint, xiangQi);                    return true;                }            } else {                instance.updateXiangQi(oldPoint, null);                instance.updateXiangQi(newPoint, xiangQi);                return true;            }        }        return false;    }        /**     * <p>[概 要] 象のルルチェック</p>     * <p>[詳 細] </p>     * <p>[備 考] </p>     *     * @param xiangQi　棋     */    private static boolean checkXiang(XiangQi xiangQi) {        XiangQiPoints instance = XiangQiPoints.getInstance();        int rowWidth = instance.getRowWidth();        int cellWidth = instance.getCellWidth();        // 棋移動前の位置        int oldXpoint = xiangQi.getOldXPoint() +15;        int oldYPoint = xiangQi.getOldYPoints()+15;        String oldPoint = oldXpoint+ "," + oldYPoint;        Point p = xiangQi.getLocation();        // 棋移動前の位置        int newXpoint = p.x +15;        int newYpoint = p.y +15;                int xAbs = Math.abs(newXpoint-oldXpoint);        int yAbs = Math.abs(newYpoint-oldYPoint);                if (!(xAbs == cellWidth * 2 && yAbs == rowWidth * 2)) {            return false;        }                if (Color.RED.equals(xiangQi.getColor())) {            if (newYpoint > rowWidth * 5) {                return false;            }        } else {            if (newYpoint < rowWidth * 6) {                return false;            }        }                List<String> xiangYanLst = new ArrayList<String>();        xiangYanLst.add((oldXpoint - cellWidth) + "," + (oldYPoint - rowWidth));        xiangYanLst.add((oldXpoint + cellWidth)  + "," + (oldYPoint - rowWidth));        xiangYanLst.add((oldXpoint - cellWidth) + "," + (oldYPoint + rowWidth));        xiangYanLst.add((oldXpoint + cellWidth) + "," + (oldYPoint + rowWidth));        for (String xiangYan : xiangYanLst) {            if (instance.checkPoints(xiangYan)) {                XiangQi checkXiangQi = instance.getXiangQi(xiangYan);                if (checkXiangQi != null) {                    Point xiangYanP = checkXiangQi.getLocation();                    int xiangYanXpoint = xiangYanP.x +15;                    int xiangYanYpoint = xiangYanP.y +15;                    int xiangYanXAbs = Math.abs(xiangYanXpoint - newXpoint);                    int xiangYanYAbs = Math.abs(xiangYanYpoint - newYpoint);                    if (xiangYanXAbs == cellWidth && xiangYanYAbs == rowWidth) {                        return false;                    }                }            }        }                        String newPoint = newXpoint+ "," + newYpoint;        List<String> pointsLst = new ArrayList<String>();        pointsLst.add((oldXpoint - cellWidth * 2) + "," + (oldYPoint - rowWidth * 2));        pointsLst.add((oldXpoint + cellWidth * 2) + "," + (oldYPoint - rowWidth * 2));        pointsLst.add((oldXpoint - cellWidth * 2) + "," + (oldYPoint + rowWidth * 2));        pointsLst.add((oldXpoint + cellWidth * 2) + "," + (oldYPoint + rowWidth * 2));
        if (pointsLst.contains(newPoint)) {            XiangQi checkXiangQi = instance.getXiangQi(newPoint);            if (checkXiangQi != null) {                if (checkXiangQi.getColor().equals(xiangQi.getColor())) {                    return false;                } else {                    XiangQiPan qiPan  = XiangQiPan.getInstance();                    qiPan.remove(checkXiangQi);                    instance.updateXiangQi(oldPoint, null);                    instance.updateXiangQi(newPoint, xiangQi);                    return true;                }            } else {                instance.updateXiangQi(oldPoint, null);                instance.updateXiangQi(newPoint, xiangQi);                return true;            }        }        return false;    }        /**     * <p>[概 要] 士のルルチェック</p>     * <p>[詳 細] </p>     * <p>[備 考] </p>     *     * @param xiangQi　棋     */    private static boolean checkShi(XiangQi xiangQi) {        XiangQiPoints instance = XiangQiPoints.getInstance();        int rowWidth = instance.getRowWidth();        int cellWidth = instance.getCellWidth();        // 棋移動前の位置        int oldXpoint = xiangQi.getOldXPoint() +15;        int oldYPoint = xiangQi.getOldYPoints()+15;        String oldPoint = oldXpoint+ "," + oldYPoint;        Point p = xiangQi.getLocation();        // 棋移動前の位置        int newXpoint = p.x +15;        int newYpoint = p.y +15;                int xAbs = Math.abs(newXpoint-oldXpoint);        int yAbs = Math.abs(newYpoint-oldYPoint);                if (!(xAbs == cellWidth && yAbs == rowWidth )) {            return false;        }                List<String> pointsLst = new ArrayList<String>();        if (Color.RED.equals(xiangQi.getColor())) {            pointsLst.add(cellWidth * 4 + "," + rowWidth);            pointsLst.add(cellWidth * 6 + "," + rowWidth);            pointsLst.add(cellWidth * 5 + "," + rowWidth * 2);            pointsLst.add(cellWidth * 4 + "," + rowWidth * 3);            pointsLst.add(cellWidth * 6 + "," + rowWidth * 3);        } else {            pointsLst.add(cellWidth * 4 + "," + rowWidth * 10);            pointsLst.add(cellWidth * 6 + "," + rowWidth * 10);            pointsLst.add(cellWidth * 5 + "," + rowWidth * 9);            pointsLst.add(cellWidth * 4 + "," + rowWidth * 8);            pointsLst.add(cellWidth * 6 + "," + rowWidth * 8);        }        String newPoint = newXpoint+ "," + newYpoint;
        if (pointsLst.contains(newPoint)) {            XiangQi checkXiangQi = instance.getXiangQi(newPoint);            if (checkXiangQi != null) {                if (checkXiangQi.getColor().equals(xiangQi.getColor())) {                    return false;                } else {                    XiangQiPan qiPan  = XiangQiPan.getInstance();                    qiPan.remove(checkXiangQi);                    instance.updateXiangQi(oldPoint, null);                    instance.updateXiangQi(newPoint, xiangQi);                    return true;                }            } else {                instance.updateXiangQi(oldPoint, null);                instance.updateXiangQi(newPoint, xiangQi);                return true;            }        }        return false;    }        /**     * <p>[概 要] 将のルルチェック</p>     * <p>[詳 細] </p>     * <p>[備 考] </p>     *     * @param xiangQi　棋     */    private static boolean checkJiang(XiangQi xiangQi) {        XiangQiPoints instance = XiangQiPoints.getInstance();        int rowWidth = instance.getRowWidth();        int cellWidth = instance.getCellWidth();        // 棋移動前の位置        int oldXpoint = xiangQi.getOldXPoint() +15;        int oldYPoint = xiangQi.getOldYPoints()+15;        String oldPoint = oldXpoint+ "," + oldYPoint;        Point p = xiangQi.getLocation();        // 棋移動前の位置        int newXpoint = p.x +15;        int newYpoint = p.y +15;                int xAbs = Math.abs(newXpoint-oldXpoint);        int yAbs = Math.abs(newYpoint-oldYPoint);                if (!((xAbs == 0 && yAbs == rowWidth) || (xAbs == cellWidth && yAbs == 0))) {            return false;        }                List<String> pointsLst = new ArrayList<String>();        if (Color.RED.equals(xiangQi.getColor())) {            pointsLst.add(cellWidth * 4 + "," + rowWidth);            pointsLst.add(cellWidth * 5 + "," + rowWidth);            pointsLst.add(cellWidth * 6 + "," + rowWidth);            pointsLst.add(cellWidth * 4 + "," + rowWidth * 2);            pointsLst.add(cellWidth * 5 + "," + rowWidth * 2);            pointsLst.add(cellWidth * 6 + "," + rowWidth * 2);            pointsLst.add(cellWidth * 4 + "," + rowWidth * 3);            pointsLst.add(cellWidth * 5 + "," + rowWidth * 3);            pointsLst.add(cellWidth * 6 + "," + rowWidth * 3);        } else {            pointsLst.add(cellWidth * 4 + "," + rowWidth * 10);            pointsLst.add(cellWidth * 5 + "," + rowWidth * 10);            pointsLst.add(cellWidth * 6 + "," + rowWidth * 10);            pointsLst.add(cellWidth * 4 + "," + rowWidth * 9);            pointsLst.add(cellWidth * 5 + "," + rowWidth * 9);            pointsLst.add(cellWidth * 6 + "," + rowWidth * 9);            pointsLst.add(cellWidth * 4 + "," + rowWidth * 8);            pointsLst.add(cellWidth * 5 + "," + rowWidth * 8);            pointsLst.add(cellWidth * 6 + "," + rowWidth * 8);        }        String newPoint = newXpoint+ "," + newYpoint;
        if (pointsLst.contains(newPoint)) {            XiangQi checkXiangQi = instance.getXiangQi(newPoint);            if (checkXiangQi != null) {                if (checkXiangQi.getColor().equals(xiangQi.getColor())) {                    return false;                } else {                    XiangQiPan qiPan  = XiangQiPan.getInstance();                    qiPan.remove(checkXiangQi);                    instance.updateXiangQi(oldPoint, null);                    instance.updateXiangQi(newPoint, xiangQi);                    return true;                }            } else {                instance.updateXiangQi(oldPoint, null);                instance.updateXiangQi(newPoint, xiangQi);                return true;            }        }        return false;    }        /**     * <p>[概 要] 砲のルルチェック</p>     * <p>[詳 細] </p>     * <p>[備 考] </p>     *     * @param xiangQi　棋     */    private static boolean checkPao(XiangQi xiangQi) {        XiangQiPoints instance = XiangQiPoints.getInstance();        int rowWidth = instance.getRowWidth();        int cellWidth = instance.getCellWidth();        // 棋移動前の位置        int oldXpoint = xiangQi.getOldXPoint() +15;        int oldYPoint = xiangQi.getOldYPoints()+15;        String oldPoint = oldXpoint+ "," + oldYPoint;        Point p = xiangQi.getLocation();        // 棋移動前の位置        int newXpoint = p.x +15;        int newYpoint = p.y +15;        String newPoint = newXpoint+ "," + newYpoint;        if (newXpoint != oldXpoint && newYpoint != oldYPoint) {            return false;        }
        List<String> pointsLst = new ArrayList<String>();        if (newXpoint == oldXpoint) {            int abs = Math.abs(newYpoint - oldYPoint);            int count = abs / rowWidth;            for (int i = 1; i < count; i++) {                if (newYpoint > oldYPoint) {                    pointsLst.add(oldXpoint + "," + (oldYPoint + rowWidth * i));                } else {                    pointsLst.add(oldXpoint + "," + (oldYPoint - rowWidth * i));                }            }        }
        if (newYpoint == oldYPoint) {            int abs = Math.abs(newXpoint - oldXpoint);            int count = abs / cellWidth;            for (int i = 1; i < count; i++) {                if (newXpoint > oldXpoint) {                    pointsLst.add((oldXpoint + cellWidth * i) + "," + oldYPoint);                } else {                    pointsLst.add((oldXpoint - cellWidth * i) + "," + oldYPoint);                }            }        }                int checkCount = 0;        for (String pointCheck : pointsLst) {            if (instance.checkPoints(pointCheck)) {                XiangQi checkXiangQi = instance.getXiangQi(pointCheck);                if (checkXiangQi != null) {                    if (checkXiangQi.getColor().equals(xiangQi.getColor())) {                        return false;                    } else {                        checkCount++;                      }                }            }        }                if (checkCount == 1 ) {            XiangQi checkXiangQi = instance.getXiangQi(newPoint);            if (checkXiangQi != null) {                if (checkXiangQi.getColor().equals(xiangQi.getColor())) {                    return false;                } else {                    XiangQiPan qiPan  = XiangQiPan.getInstance();                    qiPan.remove(checkXiangQi);                    instance.updateXiangQi(oldPoint, null);                    instance.updateXiangQi(newPoint, xiangQi);                    return true;                }            } else {                return false;            }        } else if (checkCount == 0 ) {            XiangQi checkXiangQi = instance.getXiangQi(newPoint);            if (checkXiangQi != null) {                return false;            } else {                instance.updateXiangQi(oldPoint, null);                instance.updateXiangQi(newPoint, xiangQi);                return true;            }        } else {            return false;        }    }        /**     * <p>[概 要] 兵のルルチェック</p>     * <p>[詳 細] </p>     * <p>[備 考] </p>     *     * @param xiangQi　棋     */    private static boolean checkBing(XiangQi xiangQi) {        XiangQiPoints instance = XiangQiPoints.getInstance();        int rowWidth = instance.getRowWidth();        int cellWidth = instance.getCellWidth();        // 棋移動前の位置        int oldXpoint = xiangQi.getOldXPoint() +15;        int oldYPoint = xiangQi.getOldYPoints()+15;        String oldPoint = oldXpoint+ "," + oldYPoint;        Point p = xiangQi.getLocation();        // 棋移動前の位置        int newXpoint = p.x +15;        int newYpoint = p.y +15;                        int xAbs = Math.abs(newXpoint-oldXpoint);        if (Color.RED.equals(xiangQi.getColor())) {            int yAbs = newYpoint-oldYPoint;            if (yAbs < 0) {                return false;            }            if (oldYPoint > rowWidth * 5) {                if (!((xAbs == 0 && yAbs == rowWidth) || (xAbs == cellWidth && yAbs == 0))) {                    return false;                }            } else {                if (!(xAbs == 0 && yAbs == rowWidth)) {                    return false;                }            }        } else {            int yAbs = oldYPoint - newYpoint;             if (yAbs < 0) {                return false;            }            if (oldYPoint < rowWidth * 6) {                if (!((xAbs == 0 && yAbs == rowWidth) || (xAbs == cellWidth && yAbs == 0))) {                    return false;                }            } else {                if (!(xAbs == 0 && yAbs == rowWidth)) {                    return false;                }            }        }                String newPoint = newXpoint+ "," + newYpoint;
        XiangQi checkXiangQi = instance.getXiangQi(newPoint);        if (checkXiangQi != null ) {            if (checkXiangQi.getColor().equals(xiangQi.getColor())) {                return false;            } else {                XiangQiPan qiPan  = XiangQiPan.getInstance();                qiPan.remove(checkXiangQi);                instance.updateXiangQi(oldPoint, null);                instance.updateXiangQi(newPoint, xiangQi);                return true;            }        } else {            instance.updateXiangQi(oldPoint, null);            instance.updateXiangQi(newPoint, xiangQi);            return true;         }    }}
